{
  "ID_PREFIX_ROW_GROUP": { "type": {} },
  "ID_PREFIX_TOP_PINNED": { "type": {} },
  "ID_PREFIX_BOTTOM_PINNED": { "type": {} },
  "EVENT_ROW_SELECTED": { "type": {} },
  "EVENT_DATA_CHANGED": { "type": {} },
  "EVENT_CELL_CHANGED": { "type": {} },
  "EVENT_ALL_CHILDREN_COUNT_CHANGED": { "type": {} },
  "EVENT_MASTER_CHANGED": { "type": {} },
  "EVENT_GROUP_CHANGED": { "type": {} },
  "EVENT_MOUSE_ENTER": { "type": {} },
  "EVENT_MOUSE_LEAVE": { "type": {} },
  "EVENT_HEIGHT_CHANGED": { "type": {} },
  "EVENT_TOP_CHANGED": { "type": {} },
  "EVENT_DISPLAYED_CHANGED": { "type": {} },
  "EVENT_FIRST_CHILD_CHANGED": { "type": {} },
  "EVENT_LAST_CHILD_CHANGED": { "type": {} },
  "EVENT_CHILD_INDEX_CHANGED": { "type": {} },
  "EVENT_ROW_INDEX_CHANGED": { "type": {} },
  "EVENT_EXPANDED_CHANGED": { "type": {} },
  "EVENT_HAS_CHILDREN_CHANGED": { "type": {} },
  "EVENT_SELECTABLE_CHANGED": { "type": {} },
  "EVENT_UI_LEVEL_CHANGED": { "type": {} },
  "EVENT_HIGHLIGHT_CHANGED": { "type": {} },
  "EVENT_DRAGGING_CHANGED": { "type": {} },
  "id": {
    "description": "/** Unique ID for the node. Either provided by the application, or generated by the grid if not. */",
    "type": { "returnType": "string | undefined" }
  },
  "groupData": {
    "description": "/** If using row grouping, contains the group values for this group. */",
    "type": { "returnType": "{ [key: string]: any | null; } | null" }
  },
  "aggData": {
    "description": "/** If using row grouping and aggregation, contains the aggregation data. */",
    "type": { "returnType": "any" }
  },
  "data": {
    "description": "/** The data as provided by the application.\n * Can be `undefined` when using row grouping or during grid initialisation. */",
    "type": { "returnType": "TData | undefined" }
  },
  "parent": {
    "description": "/** The parent node to this node, or empty if top level */",
    "type": { "returnType": "RowNode<TData> | null" }
  },
  "level": {
    "description": "/** How many levels this node is from the top when grouping. */",
    "type": { "returnType": "number" }
  },
  "uiLevel": {
    "description": "/** How many levels this node is from the top when grouping in the UI (only different to `parent` when `groupRemoveSingleChildren=true`) */",
    "type": { "returnType": "number" }
  },
  "rowGroupIndex": {
    "description": "/** If doing in-memory (client-side) grouping, this is the index of the group column this cell is for.\n * This will always be the same as the level, unless we are collapsing groups, i.e. `groupRemoveSingleChildren=true`. */",
    "type": { "returnType": "number | null" }
  },
  "group": {
    "description": "/** `true` if this node is a group node (ie has children) */",
    "type": { "returnType": "boolean | undefined" }
  },
  "dragging": {
    "description": "/** `true` if this row is getting dragged */",
    "type": { "returnType": "boolean" }
  },
  "master": {
    "description": "/** `true` if this row is a master row, part of master / detail (ie row can be expanded to show detail) */",
    "type": { "returnType": "boolean" }
  },
  "detail": {
    "description": "/** `true` if this row is a detail row, part of master / detail (ie child row of an expanded master row) */",
    "type": { "returnType": "boolean" }
  },
  "detailNode": {
    "description": "/** If this row is a master row that was expanded, this points to the associated detail row. */",
    "type": { "returnType": "RowNode" }
  },
  "detailGridInfo": {
    "description": "/** If master detail, this contains details about the detail grid */",
    "type": { "returnType": "DetailGridInfo | null" }
  },
  "leafGroup": {
    "description": "/** `true` if this node is a group and the group is the bottom level in the tree. */",
    "type": { "returnType": "boolean" }
  },
  "firstChild": {
    "description": "/** `true` if this is the first child in this group. Changes when data is sorted. */",
    "type": { "returnType": "boolean" }
  },
  "lastChild": {
    "description": "/** `true` if this is the last child in this group. Changes when data is sorted. */",
    "type": { "returnType": "boolean" }
  },
  "childIndex": {
    "description": "/** Index of this row with respect to its parent when grouping. Changes when data is sorted. */",
    "type": { "returnType": "number" }
  },
  "rowIndex": {
    "description": "/** The current row index. If the row is filtered out or in a collapsed group, this value will be `null`. */",
    "type": { "returnType": "number | null" }
  },
  "rowPinned": {
    "description": "/** Either 'top' or 'bottom' if row pinned, otherwise `undefined` or `null`. */",
    "type": { "returnType": "string" }
  },
  "sticky": {
    "description": "/** When true, this row will appear in the top */",
    "type": { "returnType": "boolean" }
  },
  "stickyRowTop": {
    "description": "/** If row is pinned, then pinnedRowTop is used rather than rowTop */",
    "type": { "returnType": "number" }
  },
  "quickFilterAggregateText": {
    "description": "/** If using quick filter, stores a string representation of the row for searching against. */",
    "type": { "returnType": "string | null" }
  },
  "footer": {
    "description": "/** `true` if row is a footer. Footers have `group = true` and `footer = true`. */",
    "type": { "returnType": "boolean" }
  },
  "field": {
    "description": "/** The field we are grouping on eg 'country'. */",
    "type": { "returnType": "string | null" }
  },
  "rowGroupColumn": {
    "description": "/** The row group column used for this group, e.g. the Country column instance. */",
    "type": { "returnType": "Column | null" }
  },
  "key": {
    "description": "/** The key for the group eg Ireland, UK, USA */",
    "type": { "returnType": "string | null" }
  },
  "stub": {
    "description": "/** Used by server-side row model. `true` if this row node is a stub. A stub is a placeholder row with loading icon while waiting from row to be loaded. */",
    "type": { "returnType": "boolean" }
  },
  "failedLoad": {
    "description": "/** Used by server side row model, true if this row node failed a load */",
    "type": { "returnType": "boolean" }
  },
  "allLeafChildren": {
    "description": "/** All lowest level nodes beneath this node, no groups. */",
    "type": { "returnType": "RowNode<TData>[]" }
  },
  "childrenAfterGroup": {
    "description": "/** Children of this group. If multi levels of grouping, shows only immediate children. */",
    "type": { "returnType": "RowNode<TData>[] | null" }
  },
  "childrenAfterFilter": {
    "description": "/** Filtered children of this group. */",
    "type": { "returnType": "RowNode<TData>[] | null" }
  },
  "childrenAfterAggFilter": {
    "description": "/** Aggregated and re-filtered children of this group. */",
    "type": { "returnType": "RowNode<TData>[] | null" }
  },
  "childrenAfterSort": {
    "description": "/** Sorted children of this group. */",
    "type": { "returnType": "RowNode<TData>[] | null" }
  },
  "allChildrenCount": {
    "description": "/** Number of children and grand children. */",
    "type": { "returnType": "number | null" }
  },
  "childrenMapped": {
    "description": "/** Children mapped by the pivot columns. */",
    "type": { "returnType": "{ [key: string]: any; } | null" }
  },
  "childStore": {
    "description": "/** Server Side Row Model Only - the children are in an infinite cache. */",
    "type": { "returnType": "IServerSideStore | null" }
  },
  "expanded": {
    "description": "/** `true` if group is expanded, otherwise `false`. */",
    "type": { "returnType": "boolean" }
  },
  "sibling": {
    "description": "/** If using footers, reference to the footer node for this group. */",
    "type": { "returnType": "RowNode" }
  },
  "rowHeight": {
    "description": "/** The height, in pixels, of this row */",
    "type": { "returnType": "number | null | undefined" }
  },
  "rowHeightEstimated": {
    "description": "/** Dynamic row heights are done on demand, only when row is visible. However for row virtualisation\n * we need a row height to do the 'what rows are in viewport' maths. So we assign a row height to each\n * row based on defaults and rowHeightEstimated=true, then when the row is needed for drawing we do\n * the row height calculation and set rowHeightEstimated=false. */",
    "type": { "returnType": "boolean" }
  },
  "displayed": {
    "description": "/** This will be `true` if it has a rowIndex assigned, otherwise `false`. */",
    "type": { "returnType": "boolean" }
  },
  "rowTop": {
    "description": "/** The row top position in pixels. */",
    "type": { "returnType": "number | null" }
  },
  "oldRowTop": {
    "description": "/** The top pixel for this row last time, makes sense if data set was ordered or filtered,\n * it is used so new rows can animate in from their old position. */",
    "type": { "returnType": "number | null" }
  },
  "daemon": {
    "description": "/** `true` if this node is a daemon. This means row is not part of the model. Can happen when then\n * the row is selected and then the user sets a different ID onto the node. The nodes is then\n * representing a different entity, so the selection controller, if the node is selected, takes\n * a copy where daemon=true. */",
    "type": { "returnType": "boolean" }
  },
  "selectable": {
    "description": "/** `true` by default - can be overridden via gridOptions.isRowSelectable(rowNode) */",
    "type": {}
  },
  "___cacheData": {
    "description": "/** Used by the value service, stores values for a particular change detection turn. */",
    "type": { "returnType": "{ [colId: string]: any; }" }
  },
  "___cacheVersion": { "type": { "returnType": "number" } },
  "___objectId": {
    "description": "/** Used by sorting service - to give deterministic sort to groups. Previously we\n * just id for this, however id is a string and had slower sorting compared to numbers. */",
    "type": { "returnType": "number" }
  },
  "alreadyRendered": {
    "description": "/** `true` when nodes with the same id are being removed and added as part of the same batch transaction */",
    "type": {}
  },
  "highlighted": { "type": { "returnType": "RowHighlightPosition | null" } },
  "setData": {
    "description": "/** Replaces the data on the `rowNode`. When complete, the grid will refresh the the entire rendered row if it is showing. */",
    "type": { "arguments": { "data": "TData" }, "returnType": "void" }
  },
  "updateData": {
    "type": { "arguments": { "data": "TData" }, "returnType": "void" }
  },
  "getRowIndexString": { "type": { "arguments": {}, "returnType": "string" } },
  "setDataAndId": {
    "type": {
      "arguments": { "data": "TData", "id": "string | undefined" },
      "returnType": "void"
    }
  },
  "setRowSelectable": { "type": { "arguments": { "newVal": "boolean" } } },
  "setId": {
    "type": { "arguments": { "id?": "string" }, "returnType": "void" }
  },
  "getGroupKeys": {
    "type": {
      "arguments": { "excludeSelf": "undefined = false" },
      "returnType": "string[]"
    }
  },
  "isPixelInRange": {
    "type": { "arguments": { "pixel": "number" }, "returnType": "boolean" }
  },
  "setFirstChild": {
    "type": { "arguments": { "firstChild": "boolean" }, "returnType": "void" }
  },
  "setLastChild": {
    "type": { "arguments": { "lastChild": "boolean" }, "returnType": "void" }
  },
  "setChildIndex": {
    "type": { "arguments": { "childIndex": "number" }, "returnType": "void" }
  },
  "setRowTop": {
    "type": { "arguments": { "rowTop": "number | null" }, "returnType": "void" }
  },
  "clearRowTopAndRowIndex": {
    "type": { "arguments": {}, "returnType": "void" }
  },
  "setDragging": {
    "type": { "arguments": { "dragging": "boolean" }, "returnType": "void" }
  },
  "setHighlighted": {
    "type": {
      "arguments": { "highlighted": "RowHighlightPosition | null" },
      "returnType": "void"
    }
  },
  "setAllChildrenCount": {
    "type": {
      "arguments": { "allChildrenCount": "number | null" },
      "returnType": "void"
    }
  },
  "setMaster": {
    "type": { "arguments": { "master": "boolean" }, "returnType": "void" }
  },
  "setGroup": {
    "type": { "arguments": { "group": "boolean" }, "returnType": "void" }
  },
  "setRowHeight": {
    "description": "/** Sets the row height.\n * Call if you want to change the height initially assigned to the row.\n * After calling, you must call `api.onRowHeightChanged()` so the grid knows it needs to work out the placement of the rows. */",
    "type": {
      "arguments": {
        "rowHeight": "number | undefined | null",
        "estimated": "undefined = false"
      },
      "returnType": "void"
    }
  },
  "setRowAutoHeight": {
    "type": {
      "arguments": { "cellHeight": "number | undefined", "column": "Column" },
      "returnType": "void"
    }
  },
  "checkAutoHeights": { "type": { "arguments": {}, "returnType": "void" } },
  "setRowIndex": {
    "type": {
      "arguments": { "rowIndex": "number | null" },
      "returnType": "void"
    }
  },
  "setUiLevel": {
    "type": { "arguments": { "uiLevel": "number" }, "returnType": "void" }
  },
  "setExpanded": {
    "description": "/** Set the expanded state of this rowNode. Pass `true` to expand and `false` to collapse. */",
    "type": {
      "arguments": {
        "expanded": "boolean",
        "e?": "MouseEvent | KeyboardEvent"
      },
      "returnType": "void"
    }
  },
  "setDataValue": {
    "description": "/** Replaces the value on the `rowNode` for the specified column. When complete,\n * the grid will refresh the rendered cell on the required row only.\n * @param colKey The column where the value should be updated\n * @param newValue The new value\n * @param eventSource The source of the event\n * @returns `True` if the value was changed, otherwise `False`.\n */",
    "type": {
      "arguments": {
        "colKey": "string | Column",
        "newValue": "any",
        "eventSource?": "string"
      },
      "returnType": "boolean"
    }
  },
  "setGroupValue": {
    "type": {
      "arguments": { "colKey": "string | Column", "newValue": "any" },
      "returnType": "void"
    }
  },
  "setAggData": {
    "type": { "arguments": { "newAggData": "any" }, "returnType": "void" }
  },
  "updateHasChildren": { "type": { "arguments": {}, "returnType": "void" } },
  "hasChildren": { "type": { "arguments": {}, "returnType": "boolean" } },
  "isEmptyRowGroupNode": {
    "type": { "arguments": {}, "returnType": "boolean | undefined" }
  },
  "resetQuickFilterAggregateText": {
    "description": "/** The first time `quickFilter` runs, the grid creates a one-off string representation of the row.\n * This string is then used for the quick filter instead of hitting each column separately.\n * When you edit, using grid editing, this string gets cleared down.\n * However if you edit without using grid editing, you will need to clear this string down for the row to be updated with the new values.\n * Otherwise new values will not work with the `quickFilter`. */",
    "type": { "arguments": {}, "returnType": "void" }
  },
  "isExpandable": { "type": { "arguments": {}, "returnType": "boolean" } },
  "isSelected": {
    "description": "/** Returns:\n * - `true` if node is selected,\n * - `false` if the node isn't selected\n * - `undefined` if it's partially selected (group where not all children are selected). */",
    "type": { "arguments": {}, "returnType": "boolean | undefined" }
  },
  "depthFirstSearch": {
    "description": "/** Perform a depth-first search of this node and its children. */",
    "type": {
      "arguments": { "callback": "(rowNode: RowNode<TData>) => void" },
      "returnType": "void"
    }
  },
  "calculateSelectedFromChildren": {
    "type": { "arguments": {}, "returnType": "boolean | undefined | null" }
  },
  "setSelectedInitialValue": {
    "type": { "arguments": { "selected": "boolean" }, "returnType": "void" }
  },
  "setSelected": {
    "description": "/** Select (or deselect) the node.\n * @param newValue -`true` for selection, `false` for deselection.\n * @param clearSelection - If selecting, then passing `true` will select the node exclusively (i.e. NOT do multi select). If doing deselection, `clearSelection` has no impact.\n * @param suppressFinishActions - Pass `true` to prevent the `selectionChanged` from being fired. Note that the `rowSelected` event will still be fired.\n */",
    "type": {
      "arguments": {
        "newValue": "boolean",
        "clearSelection": "boolean = false",
        "suppressFinishActions": "boolean = false"
      }
    }
  },
  "isRowPinned": { "type": { "arguments": {}, "returnType": "boolean" } },
  "setSelectedParams": {
    "type": {
      "arguments": { "params": "SetSelectedParams & { event?: Event; }" },
      "returnType": "number"
    }
  },
  "isParentOfNode": {
    "type": {
      "arguments": { "potentialParent": "RowNode" },
      "returnType": "boolean"
    }
  },
  "selectThisNode": {
    "type": {
      "arguments": { "newValue?": "boolean", "e?": "Event" },
      "returnType": "boolean"
    }
  },
  "addEventListener": {
    "description": "/** Add an event listener. */",
    "type": {
      "arguments": { "eventType": "string", "listener": "Function" },
      "returnType": "void"
    }
  },
  "removeEventListener": {
    "description": "/** Remove event listener. */",
    "type": {
      "arguments": { "eventType": "string", "listener": "Function" },
      "returnType": "void"
    }
  },
  "onMouseEnter": { "type": { "arguments": {}, "returnType": "void" } },
  "onMouseLeave": { "type": { "arguments": {}, "returnType": "void" } },
  "getFirstChildOfFirstChild": {
    "type": {
      "arguments": { "rowGroupColumn": "Column | null" },
      "returnType": "RowNode | null"
    }
  },
  "isFullWidthCell": { "type": { "arguments": {}, "returnType": "boolean" } },
  "getRoute": {
    "description": "/** Returns the route of the row node. If the Row Node is a group, it returns the route to that Row Node.\n * If the Row Node is not a group, it returns `undefined`. */",
    "type": { "arguments": {}, "returnType": "string[] | undefined" }
  }
}
